richNum <- convert_rich_to_numeric(richWaves)
richNum <- subset(richNum, abs(richNum$pfnew)<=1)
richOn <- subset(richOn, abs(richOn$pfnew)<=1)
richOff <- subset(richOff, abs(richOff$pfnew)<=1)
rOnOff <- subset(richOn, richOn$pf < 0)
rOnOn <- subset(richOn, richOn$pf > 0)
rOffOff <- subset(richOff, richOff$pf < 0)
rOffOn <- subset(richOff, richOff$pf > 0)
rOn <- rbind(rOnOn, rOffOn)
rOff <- rbind(rOnOff, rOffOff)
corrplot(cor(richNum))
set.seed(20)
clusters <- kmeans(rOn[,2:33], 30)
rOn$cluster <- as.factor(clusters$cluster)
clusters <- kmeans(rOff[,2:33], 30)
rOff$cluster <- as.factor(clusters$cluster)
ggplotly(
ggplot(rOn, aes(seq(nrow(rOn)), wnew)) +
geom_point(aes(color=cluster, text=uid))
)
nrow(rOn)
nrow(rOff)
nrow(all_stats)
representative_wave <- function(clusterNum=1, richNumDf=richOn, origDf=merge_data) {
uids <- subset(richNumDf$uid, richNumDf$cluster==clusterNum)
clusterWaves <- subset(origDf, origDf$uid.y %in% uids)
}
ggplot(rOff, aes(seq(nrow(rOff)), wnew)) + geom_point(aes(color=cluster))
pOn <- ggplotly(ggplot(rOn, aes(seq(nrow(rOn)), wnew)) +
geom_point(aes(color=cluster, text=uid)))
pOff <- ggplotly(ggplot(rOff, aes(seq(nrow(rOff)), wnew)) +
geom_point(aes(color=cluster, text=uid)))
subplot(pOn, pOff, nrows=2, shareX = F)
save.image("~/wave-parsing/.RData")
clusterNum=1
richNumDf=richOn
origDf=merge_data
uids <- subset(richNumDf$uid, richNumDf$cluster==clusterNum)
clusterWaves <- subset(origDf, origDf$uid.y %in% uids)
summary(richOn$uid)
summary(richOn$cluster)
richNumDf=rOn
summary(rOn$cluster)
uids <- subset(richNumDf$uid, richNumDf$cluster==clusterNum)
clusterWaves <- subset(origDf, origDf$uid.y %in% uids)
length(uids)
nrow(clusterWaves)
colnames(clusterWaves)
plot(clusterWaves[1,"current"])
qplot(clusterWaves[1,"current"])
clusterWaves[1,"current"]
qplot(unlist(clusterWaves[1,"current"]))
qplot(1:1000, unlist(clusterWaves[1,"current"]))
length(unlist(clusterWaves[1,"current"]))
qplot(1:588, unlist(clusterWaves[1,"current"]))
new_wave(clusterWaves[1,])
a <- new_wave(clusterWaves[1,])
qplot(a)
ggplot(a, aes(timePoint, voltage)) + geom_line(color='red') + geom_line(aes(timePoint, current), color='blue')
ggplot(a, aes(timePoint, voltage)) + geom_line(color='red') + geom_line(data=a, aes(timePoint, current), color='blue')
ggplot(a, aes(timepoint, voltage)) + geom_line(color='red') + geom_line(data=a, aes(timepoint, current), color='blue')
ggplot(a, aes(timepoint, voltage)) + geom_line(color='red') + geom_line(aes(timepoint, current), color='blue')
ggplot(a, aes(timepoint, voltage)) + geom_line(color='red') + geom_line(aes(timepoint, current*5), color='blue')
# library(plotly)
# library(dplyr)
library(cowplot)
a1 <- ggplot(a, aes(timepoint, voltage)) + geom_line(color='red') + geom_line(aes(timepoint, current*5), color='blue')
a <- new_wave(clusterWaves[2,])
a2 <- ggplot(a, aes(timepoint, voltage)) + geom_line(color='red') + geom_line(aes(timepoint, current*5), color='blue')
a3 <- ggplot(a, aes(timepoint, voltage)) + geom_line(color='red') + geom_line(aes(timepoint, current*5), color='blue')
a <- new_wave(clusterWaves[3,])
a3 <- ggplot(a, aes(timepoint, voltage)) + geom_line(color='red') + geom_line(aes(timepoint, current*5), color='blue')
a <- new_wave(clusterWaves[4,])
a4 <- ggplot(a, aes(timepoint, voltage)) + geom_line(color='red') + geom_line(aes(timepoint, current*5), color='blue')
a <- new_wave(clusterWaves[5,])
a5 <- ggplot(a, aes(timepoint, voltage)) + geom_line(color='red') + geom_line(aes(timepoint, current*5), color='blue')
a <- new_wave(clusterWaves[6,])
a6 <- ggplot(a, aes(timepoint, voltage)) + geom_line(color='red') + geom_line(aes(timepoint, current*5), color='blue')
a <- new_wave(clusterWaves[7,])
a7 <- ggplot(a, aes(timepoint, voltage)) + geom_line(color='red') + geom_line(aes(timepoint, current*5), color='blue')
a <- new_wave(clusterWaves[8,])
a8 <- ggplot(a, aes(timepoint, voltage)) + geom_line(color='red') + geom_line(aes(timepoint, current*5), color='blue')
a <- new_wave(clusterWaves[9,])
a9 <- ggplot(a, aes(timepoint, voltage)) + geom_line(color='red') + geom_line(aes(timepoint, current*5), color='blue')
a <- new_wave(clusterWaves[10,])
a10 <- ggplot(a, aes(timepoint, voltage)) + geom_line(color='red') + geom_line(aes(timepoint, current*5), color='blue')
a <- new_wave(clusterWaves[11,])
a11 <- ggplot(a, aes(timepoint, voltage)) + geom_line(color='red') + geom_line(aes(timepoint, current*5), color='blue')
a <- new_wave(clusterWaves[12,])
a12 <- ggplot(a, aes(timepoint, voltage)) + geom_line(color='red') + geom_line(aes(timepoint, current*5), color='blue')
plot_grid(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12
ncol=4)
plot_grid(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12,
ncol=4)
a$voltage[1]
a$voltage[2]
sample(a, 10)
sample(a, 0.01)
sample(a$voltage, 0.01)
a$voltage
sample(a$voltage, 0.1)
sample(a$voltage, a)
sample(a$voltage, 1)
sample(a$voltage, 100)
subSampling=0.1
rm(subsetting)
clusterSample <- sample(clusterWaves, nrow(clusterSample)*subSampling)
clusterSample <- sample(clusterWaves, nrow(clusterWaves)*subSampling)
?sample
clusterSample <- sample_n(clusterWaves, nrow(clusterWaves)*subSampling)
repWave <- new_wave(clusterSample[1,])
i =2
a <- clusterSample[i, ]
newWave <- new_wave(a)
representative_wave <- function(clusterNum=1, richNumDf=rOn, origDf=merge_data, subSampling=0.1) {
uids <- subset(richNumDf$uid, richNumDf$cluster==clusterNum)
clusterWaves <- subset(origDf, origDf$uid.y %in% uids)
clusterSample <- sample_n(clusterWaves, nrow(clusterWaves)*subSampling)  # choose percentage of rows at random
repWave <- new_wave(clusterSample[1,])
for (i in 2:nrow(clusterSample)) {
a <- clusterSample[i, ]
newWave <- new_wave(a)
repWave$current <- (repWave$current + newWave$current)/2
repWave$voltage <- (repWave$voltage + newWave$voltage)/2
}
return(repWave)
}
repWave <- representative_wave()
ggplot(repWave, aes(timepoint, voltage)) + geom_line(color='red') + geom_line(aes(timepoint, current*5), color='blue')
nClusters <- 30
View(repWave)
representative_wave <- function(clusterNum=1, richNumDf=rOn, origDf=merge_data, subSampling=0.1) {
uids <- subset(richNumDf$uid, richNumDf$cluster==clusterNum)
clusterWaves <- subset(origDf, origDf$uid.y %in% uids)
clusterSample <- sample_n(clusterWaves, nrow(clusterWaves)*subSampling)  # choose percentage of rows at random
repWave <- new_wave(clusterSample[1,])
if(repWave$voltage[1] > repWave$voltage[2]) {
repWave$current <- repWave$current * -1
repWave$voltage <- repWave$voltage * -1
}
for (i in 2:nrow(clusterSample)) {
a <- clusterSample[i, ]
newWave <- new_wave(a)
if(newWave$voltage[1] > newWave$voltage[2]) {
newWave$current <- newWave$current * -1
newWave$voltage <- newWave$voltage * -1
}
repWave$current <- (repWave$current + newWave$current)/2
repWave$voltage <- (repWave$voltage + newWave$voltage)/2
}
return(repWave)
}
repWave <- representative_wave()
ggplot(repWave, aes(timepoint, voltage)) + geom_line(color='red') + geom_line(aes(timepoint, current*5), color='blue')
ggplot(repWave, aes(timepoint, voltage)) + geom_line(color='red') + geom_line(aes(timepoint, current*5), color='blue') + geom_hline(0)
ggplot(repWave, aes(timepoint, voltage)) + geom_line(color='red') + geom_line(aes(timepoint, current*5), color='blue') + geom_hline(aes(yintercept=0))
ggplot(repWave, aes(timepoint, voltage)) + geom_line(color='red') + geom_line(aes(timepoint, current*5), color='blue') + geom_hline(aes(yintercept=0)) + geom_vline(aes(xintercept=500))
nrow(merge_data$cluster)
is.null(nrow(merge_data$cluster))
max(richNum$cluster==40)
richNum$cluster==40
richNum$cluster==33
richNum$cluster==32
richNum$cluster==1
richNumDf$cluster==1
max(richNumDf$cluster==1)
max(richNumDf$cluster==40)
representative_wave <- function(clusterNum=1, richNumDf=rOn, origDf=merge_data, subSampling=0.1) {
# calculate a representative wave for a given cluster
if(is.null(nrow(richNumDf$cluster) || max(richNumDf$cluster==clusterNum) == 0)) {
print("Clusters not found")
return(NA)
}
uids <- subset(richNumDf$uid, richNumDf$cluster==clusterNum)
clusterWaves <- subset(origDf, origDf$uid.y %in% uids)
clusterSample <- sample_n(clusterWaves, nrow(clusterWaves)*subSampling)  # choose percentage of rows at random
repWave <- new_wave(clusterSample[1,])
if(repWave$voltage[1] > repWave$voltage[2]) {
repWave$current <- repWave$current * -1
repWave$voltage <- repWave$voltage * -1
}
for (i in 2:nrow(clusterSample)) {
a <- clusterSample[i, ]
newWave <- new_wave(a)
if(newWave$voltage[1] > newWave$voltage[2]) {
newWave$current <- newWave$current * -1
newWave$voltage <- newWave$voltage * -1
}
repWave$current <- (repWave$current + newWave$current)/2
repWave$voltage <- (repWave$voltage + newWave$voltage)/2
}
return(repWave)
}
clusterPlots <- c()
clusterPlots <- c()
for (k in 1:nClusters) {
print(paste("Cluster", k))
repWave <- representative_wave(numCluster=k)
kp <- ggplot(repWave, aes(timepoint, voltage)) + geom_line(color='red') + geom_line(aes(timepoint, current*5), color='blue') + geom_hline(aes(yintercept=0)) + geom_vline(aes(xintercept=500))
clusterPlots <- c(clusterPlots, kp)
}
clusterPlots <- c()
for (k in 1:nClusters) {
print(paste("Cluster", k))
repWave <- representative_wave(clusterNum = k)
kp <- ggplot(repWave, aes(timepoint, voltage)) + geom_line(color='red') + geom_line(aes(timepoint, current*5), color='blue') + geom_hline(aes(yintercept=0)) + geom_vline(aes(xintercept=500))
clusterPlots <- c(clusterPlots, kp)
}
# calculate a representative wave for a given cluster
if(is.null(nrow(richNumDf$cluster)) || max(richNumDf$cluster==clusterNum) == 0) {
print("Clusters not found")
return(NA)
}
clusterNum
richNumDf$cluster
clusterNum
nrow(richNumDf$cluster)
length(richNumDf$cluster)
length(merge_data$cluster)
# calculate a representative wave for a given cluster
if(length(richNumDf$cluster) == 0 || max(richNumDf$cluster==clusterNum) == 0) {
print("Clusters not found")
return(NA)
}
representative_wave <- function(clusterNum=1, richNumDf=rOn, origDf=merge_data, subSampling=0.1) {
# calculate a representative wave for a given cluster
if(length(richNumDf$cluster) == 0 || max(richNumDf$cluster==clusterNum) == 0) {
print("Clusters not found")
return(NA)
}
uids <- subset(richNumDf$uid, richNumDf$cluster==clusterNum)
clusterWaves <- subset(origDf, origDf$uid.y %in% uids)
clusterSample <- sample_n(clusterWaves, nrow(clusterWaves)*subSampling)  # choose percentage of rows at random
repWave <- new_wave(clusterSample[1,])
if(repWave$voltage[1] > repWave$voltage[2]) {
repWave$current <- repWave$current * -1
repWave$voltage <- repWave$voltage * -1
}
for (i in 2:nrow(clusterSample)) {
a <- clusterSample[i, ]
newWave <- new_wave(a)
if(newWave$voltage[1] > newWave$voltage[2]) {
newWave$current <- newWave$current * -1
newWave$voltage <- newWave$voltage * -1
}
repWave$current <- (repWave$current + newWave$current)/2
repWave$voltage <- (repWave$voltage + newWave$voltage)/2
}
return(repWave)
}
clusterPlots <- c()
for (k in 1:nClusters) {
print(paste("Cluster", k))
repWave <- representative_wave(clusterNum = k)
kp <- ggplot(repWave, aes(timepoint, voltage)) + geom_line(color='red') + geom_line(aes(timepoint, current*5), color='blue') + geom_hline(aes(yintercept=0)) + geom_vline(aes(xintercept=500))
clusterPlots <- c(clusterPlots, kp)
}
clusterPlots <- c()
for (k in 1:12) {
print(paste("Cluster", k))
repWave <- representative_wave(clusterNum = k)
kp <- ggplot(repWave, aes(timepoint, voltage)) + geom_line(color='red') + geom_line(aes(timepoint, current*5), color='blue') + geom_hline(aes(yintercept=0)) + geom_vline(aes(xintercept=500))
clusterPlots <- c(clusterPlots, kp)
}
plot_grid(clusterPlots)
??cowplot
plot_grid(as.list(clusterPlots))
plot_grid(grob(clusterPlots))
clusterPlots <- list()
for (k in 1:12) {
print(paste("Cluster", k))
repWave <- representative_wave(clusterNum = k)
kp <- ggplot(repWave, aes(timepoint, voltage)) + geom_line(color='red') + geom_line(aes(timepoint, current*5), color='blue') + geom_hline(aes(yintercept=0)) + geom_vline(aes(xintercept=500))
clusterPlots <- list(clusterPlots, kp)
}
plot_grid(clusterPlots)
plot_grid(unlist(clusterPlots))
str(clusterPlots)
rm(a1, a2)
rm(a3, a4, a5, a6, a7, a8, a9, a10, a11, a12)
clusterPlots <- vector('list', ncol(data2))
for (k in 1:12) {
print(paste("Cluster", k))
repWave <- representative_wave(clusterNum = k)
kp <- ggplot(repWave, aes(timepoint, voltage)) + geom_line(color='red') + geom_line(aes(timepoint, current*5), color='blue') + geom_hline(aes(yintercept=0)) + geom_vline(aes(xintercept=500))
clusterPlots <- list(clusterPlots, kp)
}
clusterPlots <- list()
for (k in 1:12) {
print(paste("Cluster", k))
repWave <- representative_wave(clusterNum = k)
kp <- ggplot(repWave, aes(timepoint, voltage)) + geom_line(color='red') + geom_line(aes(timepoint, current*5), color='blue') + geom_hline(aes(yintercept=0)) + geom_vline(aes(xintercept=500))
clusterPlots <- list(clusterPlots, kp)
}
plot_grid(plotlist = clusterPlots)
multiplot(plotlist = clusterPlots)
?plot_grid
?list
list(1:12)
list(12)
clusterPlots[1]
clusterPlots <- list()
for (k in 1:12) {
print(paste("Cluster", k))
repWave <- representative_wave(clusterNum = k)
kp <- ggplot(repWave, aes(timepoint, voltage)) + geom_line(color='red') + geom_line(aes(timepoint, current*5), color='blue') + geom_hline(aes(yintercept=0)) + geom_vline(aes(xintercept=500))
clusterPlots[[k]] <- kp
}
plot_grid(plotlist = clusterPlots)
r13 <- repWave(13)
r13 <- representative_wave(13)
clusterNum <- 13
# calculate a representative wave for a given cluster
if(length(richNumDf$cluster) == 0 || max(richNumDf$cluster==clusterNum) == 0) {
print("Clusters not found")
return(NA)
}
uids <- subset(richNumDf$uid, richNumDf$cluster==clusterNum)
clusterWaves <- subset(origDf, origDf$uid.y %in% uids)
clusterWaves$uid.y
clusterSample <- sample_n(clusterWaves, nrow(clusterWaves)*subSampling)  # choose percentage of rows at random
representative_wave <- function(clusterNum=1, richNumDf=rOn, origDf=merge_data, subSampling=0.1) {
# calculate a representative wave for a given cluster
if(length(richNumDf$cluster) == 0 || max(richNumDf$cluster==clusterNum) == 0) {
print("Clusters not found")
return(NA)
}
uids <- subset(richNumDf$uid, richNumDf$cluster==clusterNum)
clusterWaves <- subset(origDf, origDf$uid.y %in% uids)
if (nrow(clusterWaves) < 10) {
subSampling = 1
}
clusterSample <- sample_n(clusterWaves, nrow(clusterWaves)*subSampling)  # choose percentage of rows at random
repWave <- new_wave(clusterSample[1,])
if(repWave$voltage[1] > repWave$voltage[2]) {
repWave$current <- repWave$current * -1
repWave$voltage <- repWave$voltage * -1
}
for (i in 2:nrow(clusterSample)) {
a <- clusterSample[i, ]
newWave <- new_wave(a)
if(newWave$voltage[1] > newWave$voltage[2]) {
newWave$current <- newWave$current * -1
newWave$voltage <- newWave$voltage * -1
}
repWave$current <- (repWave$current + newWave$current)/2
repWave$voltage <- (repWave$voltage + newWave$voltage)/2
}
return(repWave)
}
clusterPlots <- list()
for (k in 1:nClusters) {
print(paste("Cluster", k))
repWave <- representative_wave(clusterNum = k)
kp <- ggplot(repWave, aes(timepoint, voltage)) + geom_line(color='red') + geom_line(aes(timepoint, current*5), color='blue') + geom_hline(aes(yintercept=0)) + geom_vline(aes(xintercept=500))
clusterPlots[[k]] <- kp
}
plot_grid(plotlist = clusterPlots)
summary(rOn$cluster)
min(40, 10)
clusterPlots <- list()
for (k in 1:nClusters) {
print(paste("Cluster", k))
repWave <- representative_wave(clusterNum = k)
kp <- ggplot(repWave, aes(timepoint, voltage)) + geom_line(color='red') + geom_line(aes(timepoint, current*5), color='blue') + geom_hline(aes(yintercept=0)) + geom_vline(aes(xintercept=500)) + ggtitle(paste("Cluster", k))
clusterPlots[[k]] <- kp
}
plot_grid(plotlist = clusterPlots)
clusterPlots[[1]] + clusterPlots[[2]]
clusterPlots[[1]]
clusterPlots[[13]]
clusterPlots <- list()
for (k in 1:nClusters) {
print(paste("Cluster", k))
repWave <- representative_wave(clusterNum = k, richNumDf = rOff)
kp <- ggplot(repWave, aes(timepoint, voltage)) + geom_line(color='red') + geom_line(aes(timepoint, current*5), color='blue') + geom_hline(aes(yintercept=0)) + geom_vline(aes(xintercept=500)) + ggtitle(paste("Cluster", k))
clusterPlots[[k]] <- kp
}
plot_grid(plotlist = clusterPlots)
summary(rOff$cluster)
clusterNum=12
representative_wave <- function(clusterNum=12, richNumDf=rOff, origDf=merge_data, subSampling=0.1) {
# calculate a representative wave for a given cluster
if(length(richNumDf$cluster) == 0 || max(richNumDf$cluster==clusterNum) == 0) {
print("Clusters not found")
return(NA)
}
uids <- subset(richNumDf$uid, richNumDf$cluster==clusterNum)
clusterWaves <- subset(origDf, origDf$uid.y %in% uids)
if (nrow(clusterWaves) < 10) {
subSampling = 1
}
clusterSample <- sample_n(clusterWaves, nrow(clusterWaves)*subSampling)  # choose percentage of rows at random
repWave <- new_wave(clusterSample[1,])
if(repWave$voltage[1] > repWave$voltage[2]) {
repWave$current <- repWave$current * -1
repWave$voltage <- repWave$voltage * -1
}
for (i in 2:nrow(clusterSample)) {
a <- clusterSample[i, ]
newWave <- new_wave(a)
if(newWave$voltage[1] > newWave$voltage[2]) {
newWave$current <- newWave$current * -1
newWave$voltage <- newWave$voltage * -1
}
repWave$current <- (repWave$current + newWave$current)/2
repWave$voltage <- (repWave$voltage + newWave$voltage)/2
}
return(repWave)
}
richNumDf=rOff
uids <- subset(richNumDf$uid, richNumDf$cluster==clusterNum)
clusterWaves <- subset(origDf, origDf$uid.y %in% uids)
if (nrow(clusterWaves) < 10) {
subSampling = 1
}
clusterSample <- sample_n(clusterWaves, nrow(clusterWaves)*subSampling)  # choose percentage of rows at random
repWave <- new_wave(clusterSample[1,])
representative_wave <- function(clusterNum=1, richNumDf=rOn, origDf=merge_data, subSampling=0.1) {
# calculate a representative wave for a given cluster
if(length(richNumDf$cluster) == 0 || max(richNumDf$cluster==clusterNum) == 0) {
print("Clusters not found")
return(NA)
}
uids <- subset(richNumDf$uid, richNumDf$cluster==clusterNum)
clusterWaves <- subset(origDf, origDf$uid.y %in% uids)
if (nrow(clusterWaves) < 10) {
subSampling = 1
}
clusterSample <- sample_n(clusterWaves, nrow(clusterWaves)*subSampling)  # choose percentage of rows at random
repWave <- new_wave(clusterSample[1,])
if(repWave$voltage[1] > repWave$voltage[2]) {
repWave$current <- repWave$current * -1
repWave$voltage <- repWave$voltage * -1
}
if(nrow(clusterSample) > 1){
for (i in 2:nrow(clusterSample)) {
a <- clusterSample[i, ]
newWave <- new_wave(a)
if(newWave$voltage[1] > newWave$voltage[2]) {
newWave$current <- newWave$current * -1
newWave$voltage <- newWave$voltage * -1
}
repWave$current <- (repWave$current + newWave$current)/2
repWave$voltage <- (repWave$voltage + newWave$voltage)/2
}
}
return(repWave)
}
clusterPlots <- list()
for (k in 1:nClusters) {
print(paste("Cluster", k))
repWave <- representative_wave(clusterNum = k, richNumDf = rOff)
kp <- ggplot(repWave, aes(timepoint, voltage)) + geom_line(color='red') + geom_line(aes(timepoint, current*5), color='blue') + geom_hline(aes(yintercept=0)) + geom_vline(aes(xintercept=500)) + ggtitle(paste("Cluster", k))
clusterPlots[[k]] <- kp
}
plot_grid(plotlist = clusterPlots)
length(rOff$cluster==12)
length(rOff$cluster==1)
sum(rOff$cluster==1)
sum(rOff$cluster==12)
clusterPlots <- list()
for (k in 1:nClusters) {
print(paste("Cluster", k))
repWave <- representative_wave(clusterNum = k, richNumDf = rOn)
kp <- ggplot(repWave, aes(timepoint, voltage)) +
geom_hline(aes(yintercept=0)) +
geom_vline(aes(xintercept=500)) +
geom_line(color='red') +
geom_line(aes(timepoint, current*5), color='blue') +
ggtitle(paste("Cluster", k, "-", sum(rOff$cluster==k), "Waves"))
clusterPlots[[k]] <- kp
}
plot_grid(plotlist = clusterPlots)
clusterPlots <- list()
for (k in 1:nClusters) {
print(paste("Cluster", k))
repWave <- representative_wave(clusterNum = k, richNumDf = rOn)
kp <- ggplot(repWave, aes(timepoint, voltage)) +
geom_hline(aes(yintercept=0)) +
geom_vline(aes(xintercept=500)) +
geom_line(color='red') +
geom_line(aes(timepoint, current*5), color='blue') +
ggtitle(paste("Cluster", k, "-", sum(rOn$cluster==k), "Waves"))
clusterPlots[[k]] <- kp
}
plot_grid(plotlist = clusterPlots)
clusterPlots <- list()
for (k in 1:nClusters) {
print(paste("Cluster", k))
repWave <- representative_wave(clusterNum = k, richNumDf = rOff)
kp <- ggplot(repWave, aes(timepoint, voltage)) +
geom_hline(aes(yintercept=0)) +
geom_vline(aes(xintercept=500)) +
geom_line(color='red') +
geom_line(aes(timepoint, current*5), color='blue') +
ggtitle(paste("Cluster", k, "-", sum(rOff$cluster==k), "Waves"))
clusterPlots[[k]] <- kp
}
plot_grid(plotlist = clusterPlots)
b
rm(b, a, cl, con, kp)
save.image("~/wave-parsing/.RData")
library(lubridate)
d1 <- ymd("2018-10-10")
d1
today()
d2 <- ymd("2019-06-30")
d2-d1
ymd("2018-12-31") - d1
80653*0.65
92153/66040000
